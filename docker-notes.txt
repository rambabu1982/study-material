Key Concepts in Docker:

Container:

A container is a lightweight, standalone, and executable package that includes everything needed to run software, such as the code, runtime, libraries, and system tools. Containers are isolated from each other and the host system, which makes them portable and easy to manage.
Image:

An image is a read-only template from which containers are created. It contains the application code, libraries, and dependencies needed to run an application. Images can be stored in Docker registries, such as Docker Hub.
Dockerfile:

A Dockerfile is a text file that contains a set of instructions used to build a Docker image. It defines the base image, environment variables, commands, and any files that need to be copied into the image.
Docker Engine:

Docker Engine is the core service that runs and manages Docker containers. It is responsible for creating, running, and managing containers and images. It has both a server-side component (the Docker daemon) and a client-side component (the Docker CLI).
Docker Hub:

Docker Hub is a cloud-based registry service for sharing and managing Docker images. It allows users to discover, create, and publish Docker images. Users can pull images from Docker Hub to run containers locally.
Volumes:

Volumes are used for persistent data storage outside of containers. They allow data to persist even after a container is stopped or removed. Volumes can be shared between containers and are managed by Docker.
Networks:

Docker provides networking capabilities that allow containers to communicate with each other and with the outside world. Containers can be connected to different types of networks (e.g., bridge, host, or overlay) based on the use case.
Docker Compose:

Docker Compose is a tool for defining and running multi-container Docker applications using a simple YAML file (docker-compose.yml). It allows users to configure all containers, networks, and volumes in a single file and manage them as a cohesive unit.
Registry:

A Docker registry is a storage and distribution system for Docker images. Docker Hub is the default public registry. Users can also set up private registries to store their images securely.
Tags:

Tags are versions of images. They are used to differentiate multiple versions of the same image. For example, myimage:latest refers to the latest version, while myimage:v1.0 refers to version 1.0 of the image.

Docker-compose:

environment:
You can set environment variables directly in your container's environment with the environment attribute in your compose.yml.

It supports both list and mapping syntax:
services:
  webapp:
    environment:
      DEBUG: "true"
is equivalent to


services:
  webapp:
    environment:
      - DEBUG=true

You can choose not to set a value and pass the environment variables from your shell straight through to your containers. It works in the same way as docker run -e VARIABLE ...:


.....................................

The order of precedence (highest to lowest) is as follows:

Set using docker compose run -e in the CLI.
Set with either the environment or env_file attribute but with the value interpolated from your shell or an environment file. (either your default .env file, or with the --env-file argument in the CLI).
Set using just the environment attribute in the Compose file.
Use of the env_file attribute in the Compose file.
Set in a container image in the ENV directive. Having any ARG or ENV setting in a Dockerfile evaluates only if there is no Docker Compose entry for environment, env_file or run --env.

 If you want to quickly switch between image tags to test multiple versions, or want to adjust a volume source to your local environment, you don't need to edit the Compose file each time, you can just set variables that insert values into your Compose file at run time.

Interpolation can also be used to insert values into your Compose file at run time, which is then used to pass variables into your container's environment

Below is a simple example:
cat .env
TAG=v1.5
cat compose.yml
services:
  web:
    image: "webapp:${TAG}"
--------------------------------------------------------------------:
Assigning profiles to services
Services are associated with profiles through the profiles attribute which takes an array of profile names:


services:
  frontend:
    image: frontend
    profiles: [frontend]

  phpmyadmin:
    image: phpmyadmin
    depends_on: [db]
    profiles: [debug]

  backend:
    image: backend

  db:
    image: mysql
Here the services frontend and phpmyadmin are assigned to the profiles frontend and debug respectively and as such are only started when their respective profiles are enabled.

Services without a profiles attribute are always enabled. In this case running docker compose up would only start backend and db.

To start a specific profile supply the --profile command-line option or use the COMPOSE_PROFILES environment variable:


 docker compose --profile debug up

 COMPOSE_PROFILES=debug docker compose up
The above commands would both start your application with the debug profile enabled. In the example, compose.yml file above, this starts the services backend, db and phpmyadmin.

Start multiple profiles:
You can also enable multiple profiles, e.g. with docker compose --profile frontend --profile debug up the profiles frontend and debug will be enabled.

Multiple profiles can be specified by passing multiple --profile flags or a comma-separated list for the COMPOSE_PROFILES environment variable:


 docker compose --profile frontend --profile debug up

 COMPOSE_PROFILES=frontend,debug docker compose up
If you want to enable all profiles at the same time, you can run docker compose --profile "*".

-----------------------------------------------------------------
How to use secrets in Docker Compose

A secret is any piece of data, such as a password, certificate, or API key, that shouldn’t be transmitted over a network or stored unencrypted in a Dockerfile or in your application’s source code.

Docker Compose provides a way for you to use secrets without having to use environment variables to store information. If you’re injecting passwords and API keys as environment variables, you risk unintentional information exposure. Services can only access secrets when explicitly granted by a secrets attribute within the services top-level element.

Use secrets
Getting a secret into a container is a two-step process. First, define the secret using the top-level secrets element in your Compose file. Next, update your service definitions to reference the secrets they require with the secrets attribute. Compose grants access to secrets on a per-service basis.

Examples
Simple
In the following example, the frontend service is given access to the my_secret secret. In the container, /run/secrets/my_secret is set to the contents of the file ./my_secret.txt.


services:
  myapp:
    image: myapp:latest
    secrets:
      - my_secret
secrets:
  my_secret:
    file: ./my_secret.txt
Advanced

services:
   db:
     image: mysql:latest
     volumes:
       - db_data:/var/lib/mysql
     environment:
       MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
       MYSQL_DATABASE: wordpress
       MYSQL_USER: wordpress
       MYSQL_PASSWORD_FILE: /run/secrets/db_password
     secrets:
       - db_root_password
       - db_password

   wordpress:
     depends_on:
       - db
     image: wordpress:latest
     ports:
       - "8000:80"
     environment:
       WORDPRESS_DB_HOST: db:3306
       WORDPRESS_DB_USER: wordpress
       WORDPRESS_DB_PASSWORD_FILE: /run/secrets/db_password
     secrets:
       - db_password


secrets:
   db_password:
     file: db_password.txt
   db_root_password:
     file: db_root_password.txt

volumes:
    db_data:
-----------------------------------------------
Link containers
Links allow you to define extra aliases by which a service is reachable from another service. They are not required to enable services to communicate. By default, any service can reach any other service at that service's name. In the following example, db is reachable from web at the hostnames db and database:


services:

  web:
    build: .
    links:
      - "db:database"
  db:
    image: postgres

Specify custom networks
Instead of just using the default app network, you can specify your own networks with the top-level networks key. This lets you create more complex topologies and specify custom network drivers and options. You can also use it to connect services to externally-created networks which aren't managed by Compose.

Each service can specify what networks to connect to with the service-level networks key, which is a list of names referencing entries under the top-level networks key.

The following example shows a Compose file which defines two custom networks. The proxy service is isolated from the db service, because they do not share a network in common. Only app can talk to both.


services:
  proxy:
    build: ./proxy
    networks:
      - frontend
  app:
    build: ./app
    networks:
      - frontend
      - backend
  db:
    image: postgres
    networks:
      - backend

networks:
  frontend:
    # Specify driver options
    driver: bridge
    driver_opts:
      com.docker.network.bridge.host_binding_ipv4: "127.0.0.1"
  backend:
    # Use a custom driver
    driver: custom-driver

Configure the default network
Instead of, or as well as, specifying your own networks, you can also change the settings of the app-wide default network by defining an entry under networks named default:


services:
  web:
    build: .
    ports:
      - "8000:8000"
  db:
    image: postgres

networks:
  default:
    # Use a custom driver
    driver: custom-driver-1
Use a pre-existing network
If you want your containers to join a pre-existing network, use the external option


services:
  # ...
networks:
  network1:
    name: my-pre-existing-network
    external: true
Instead of attempting to create a network called [projectname]_default, Compose looks for a network called my-pre-existing-network and connects your app's containers to it.
-------------------------------------------------

Volume:
 Volumes are the preferred mechanism for persisting data generated by and used by Docker containers. While bind mounts are dependent on the directory structure and OS of the host machine, volumes are completely managed by Docker. Volumes have several advantages over bind mounts:

Volumes are easier to back up or migrate than bind mounts.
You can manage volumes using Docker CLI commands or the Docker API.
Volumes work on both Linux and Windows containers.
Volumes can be more safely shared among multiple containers.
Volume drivers let you store volumes on remote hosts or cloud providers, encrypt the contents of volumes, or add other functionality.
New volumes can have their content pre-populated by a container.
Volumes on Docker Desktop have much higher performance than bind mounts from Mac and Windows hosts.

-v or --volume: Consists of three fields, separated by colon characters (:). The fields must be in the correct order, and the meaning of each field isn't immediately obvious.

In the case of named volumes, the first field is the name of the volume, and is unique on a given host machine. For anonymous volumes, the first field is omitted.
The second field is the path where the file or directory is mounted in the container.
The third field is optional, and is a comma-separated list of options, such as ro. These options are discussed below.

Use a volume with Docker Compose
The example below shows a single Docker Compose service with a volume:


services:
  frontend:
    image: node:lts
    volumes:
      - myapp:/home/node/app
volumes:
  myapp:


